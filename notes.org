Project notes

* i2c
The Junkbot uses an Pihat with i2c to control servos
- See: https://learn.adafruit.com/adafruit-16-channel-pwm-servo-hat-for-raspberry-pi/attach-and-test-the-hat
- See: https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c

* Keyboard Servo Control
5 servos 
- 2 motors
  - left (channel 0)
  - right cChannel 1)
- 3 servos
  - channel 4
  - channel 5
  - channel 6

Keys
----
wasd - forward, rotate-left, reverse, rotate-right
r    - increase max speed (1,2,3,4)
f    - decrease max speed (4,3,2,1)

u    - servo 1 left
j    - servo 1 right
m    - toggle servo speed high/low

i    - servo 2 left
k    - servo 2 right
,    - toggle servo speed high/low

o    - servo 3 left
l    - servo 3 right
.    - toggle servo speed high/low

** Python Keyboard Monitoring
See: https://pythonhosted.org/pynput/keyboard.html

#+BEGIN_SRC python
from pynput.keyboard import Key, Listener

def on_press(key):
    print('{0} pressed'.format(
        key))

def on_release(key):
    print('{0} release'.format(
        key))
    if key == Key.esc:
        # Stop listener
        return False

# Collect events until released
with Listener(
        on_press=on_press,
        on_release=on_release) as listener:
    listener.join()
#+END_SRC

** Python Servo Command
For any I2C interfacing we'll use ioctl messages to the /dev/i2c device.

#+BEGIN_SRC shell
sudo apt-get update
sudo apt-get upgrade
sudo pip3 install --upgrade setuptools
# If above doesn't work try
# sudo apt-get install python3-pip
#+END_SRC

Check i2c device interface
#+BEGIN_SRC 
ls /dev/i2c*
#+END_SRC

#+BEGIN_SRC 
/dev/i2c-0
/dev/i2c-1
/dev/i2c-2
/dev/i2c-3
/dev/i2c-4
/dev/i2c-5
/dev/i2c-6
/dev/i2c-7
/dev/i2c-8
/dev/i2c-9
/dev/i2c-10
/dev/i2c-11
#+END_SRC

Check i2c interface status
#+BEGIN_SRC 
sudo i2cdetect -y 1
#+END_SRC

#+BEGIN_SRC 
sudo i2cdetect -l
i2c-3	i2c       	i915 gmbus ssc                  	I2C adapter
i2c-10	i2c       	DPDDC-B                         	I2C adapter
i2c-1	i2c       	Synopsys DesignWare I2C adapter 	I2C adapter
i2c-8	i2c       	i915 gmbus dpd                  	I2C adapter
i2c-6	i2c       	i915 gmbus dpc                  	I2C adapter
i2c-4	i2c       	i915 gmbus vga                  	I2C adapter
i2c-11	i2c       	DPDDC-C                         	I2C adapter
i2c-2	smbus     	SMBus I801 adapter at 3040      	SMBus adapter
i2c-0	i2c       	Synopsys DesignWare I2C adapter 	I2C adapter
i2c-9	i2c       	DPDDC-A                         	I2C adapter
i2c-7	i2c       	i915 gmbus dpb                  	I2C adapter
i2c-5	i2c       	i915 gmbus panel                	I2C adapter
#+END_SRC

*** Blinka Package
#+BEGIN_SRC 
pip3 install RPI.GPIO
pip3 install adafruit-blinka
#+END_SRC

Test
#+BEGIN_SRC python
import board
import digitalio
import busio
 
print("Hello blinka!")
 
# Try to great a Digital input
pin = digitalio.DigitalInOut(board.D4)
print("Digital IO ok!")
 
# Try to create an I2C device
i2c = busio.I2C(board.SCL, board.SDA)
print("I2C ok!")
 
# Try to create an SPI device
spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)
print("SPI ok!")
 
print("done!")
#+END_SRC

#+BEGIN_SRC shell
sudo pip3 install adafruit-circuitpython-servokit
#+END_SRC

#+BEGIN_SRC python
from adafruit_servokit import ServoKit
kit = ServoKit(channels=16)

# Motor L (Ch 0)
# kit.continuous_servo[0].throttle = 1    # Full Throttle
# kit.continuous_servo[0].throttle = 0.5  # Half Throttle
# kit.continuous_servo[0].throttle = 0    # Stop
# kit.continuous_servo[0].throttle = 0    # Full Reverse

# Motor R (Ch 1)
# kit.continuous_servo[1].throttle = 1

# Servo 0 (Ch 4)
# kit.servo[0].actuation_range = 160
# kit.servo[0].angle = 0
# kit.servo[0].set_pulse_width_range(1000, 2000)

# Servo 0 (Ch 5)
# kit.servo[0].actuation_range = 160
# kit.servo[0].angle = 0
# kit.servo[0].set_pulse_width_range(1000, 2000)

# Servo 0 (Ch 6)
# kit.servo[0].actuation_range = 160
# kit.servo[0].angle = 0
# kit.servo[0].set_pulse_width_range(1000, 2000)

#+END_SRC
